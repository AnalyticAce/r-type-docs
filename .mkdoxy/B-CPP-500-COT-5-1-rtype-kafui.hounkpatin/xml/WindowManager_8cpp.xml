<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="WindowManager_8cpp" kind="file" language="C++">
    <compoundname>WindowManager.cpp</compoundname>
    <includes refid="WindowManager_8hpp" local="yes">../../../include/Engine/Window/WindowManager.hpp</includes>
    <incdepgraph>
      <node id="9">
        <label>../../../include/Engine/Audio/AudioManager.hpp</label>
        <link refid="AudioManager_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>../../../include/Engine/Image/ImageManager.hpp</label>
        <link refid="ImageManager_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>../../../include/Engine/Mouse/MouseManager.hpp</label>
        <link refid="MouseManager_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>../../../include/Engine/Window/WindowManager.hpp</label>
        <link refid="WindowManager_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>../../../src/Client/Setting/Setting.hpp</label>
        <link refid="Setting_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Engine/Window/WindowManager.cpp</label>
        <link refid="WindowManager_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>SFML/Audio.hpp</label>
      </node>
      <node id="4">
        <label>SFML/Graphics.hpp</label>
      </node>
      <node id="12">
        <label>SFML/Window.hpp</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="7">
        <label>memory</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="WindowManager_8cpp_1aec280d23c9d0017ec6675aab38ef21a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void draw_shape</definition>
        <argsstring>(const std::string &amp;ShapeName, sf::RenderWindow &amp;window, float x=0.0f, float y=0.0f, float size=50.0f, sf::Color color=sf::Color::White, sf::Color outlineColor=sf::Color::Black, float outlineThickness=0.0f)</argsstring>
        <name>draw_shape</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>ShapeName</declname>
        </param>
        <param>
          <type>sf::RenderWindow &amp;</type>
          <declname>window</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
          <defval>0.0f</defval>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
          <defval>0.0f</defval>
        </param>
        <param>
          <type>float</type>
          <declname>size</declname>
          <defval>50.0f</defval>
        </param>
        <param>
          <type>sf::Color</type>
          <declname>color</declname>
          <defval>sf::Color::White</defval>
        </param>
        <param>
          <type>sf::Color</type>
          <declname>outlineColor</declname>
          <defval>sf::Color::Black</defval>
        </param>
        <param>
          <type>float</type>
          <declname>outlineThickness</declname>
          <defval>0.0f</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Engine/Window/WindowManager.cpp" line="53" column="6" bodyfile="src/Engine/Window/WindowManager.cpp" bodystart="53" bodyend="73"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;../../../include/Engine/Window/WindowManager.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"><ref refid="classWindowManager_1ac135d21009f510fd53eb9deae9d09e26" kindref="member">WindowManager::WindowManager</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;windowName)</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>window(sf::VideoMode(width,<sp/>height),<sp/>windowName)</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/>animation.loadAnimation(</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">,<sp/>16);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/>animation.loadAnimation(</highlight><highlight class="stringliteral">&quot;gray&quot;</highlight><highlight class="normal">,<sp/>6);</highlight></codeline>
<codeline lineno="10"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWindowManager_1ae80f59af0995398f10e08c6db2cd24fd" kindref="member">WindowManager::keepOpen</ref>()<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>animation.setPosition(</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">,<sp/>100.0f,<sp/>200.0f);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>animation.setPosition(</highlight><highlight class="stringliteral">&quot;gray&quot;</highlight><highlight class="normal">,<sp/>300.0f,<sp/>400.0f);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(window.isOpen())<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>animation.update(</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>animation.update(</highlight><highlight class="stringliteral">&quot;gray&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classWindowManager_1a0f537986c4e536250edcca73fc6c8fbc" kindref="member">handleEvent</ref>();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classWindowManager_1a857d812b14e296e5e54aae41ad036a16" kindref="member">render</ref>();</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WindowManager::drawText(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;text,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf::Color<sp/>color)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>sf::Text<sp/>sfText;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>sfText.setFont(font);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>sfText.setString(text);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>sfText.setPosition(x,<sp/>y);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>sfText.setFillColor(color);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>window.draw(sfText);</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWindowManager_1aa8f59bd5e25c0716346957f1af53e08b" kindref="member">WindowManager::drawTextTemporarily</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;text,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/>sf::Color<sp/>color,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>duration)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>TemporaryText<sp/>tempText;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>tempText.text.setFont(font);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>tempText.text.setString(text);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>tempText.text.setPosition(x,<sp/>y);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>tempText.text.setFillColor(color);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>tempText.duration<sp/>=<sp/>duration;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>tempText.clock.restart();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>tempTexts.push_back(tempText);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWindowManager_1a6fbdb45f533ddb9d54cde5288c832e2c" kindref="member">WindowManager::loadFont</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;fontPath)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!font.loadFromFile(fontPath))<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="WindowManager_8cpp_1aec280d23c9d0017ec6675aab38ef21a6" kindref="member">draw_shape</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ShapeName,<sp/>sf::RenderWindow<sp/>&amp;window,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0.0f,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0.0f,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>50.0f,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf::Color<sp/>color<sp/>=<sp/>sf::Color::White,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf::Color<sp/>outlineColor<sp/>=<sp/>sf::Color::Black,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>outlineThickness<sp/>=<sp/>0.0f)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ShapeName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;rectangle&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>sf::RectangleShape<sp/>rectangle(sf::Vector2f(size,<sp/>size));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>rectangle.setPosition(x,<sp/>y);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>rectangle.setFillColor(color);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>rectangle.setOutlineColor(outlineColor);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>rectangle.setOutlineThickness(outlineThickness);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>window.draw(rectangle);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ShapeName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;circle&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>sf::CircleShape<sp/>circle(size<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>circle.setPosition(x,<sp/>y);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>circle.setFillColor(color);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>circle.setOutlineColor(outlineColor);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>circle.setOutlineThickness(outlineThickness);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>window.draw(circle);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWindowManager_1a857d812b14e296e5e54aae41ad036a16" kindref="member">WindowManager::render</ref>()<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>window.clear(sf::Color::Black);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//window.draw(animation.getSprite());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>animation.render(window,<sp/></highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>animation.render(window,<sp/></highlight><highlight class="stringliteral">&quot;gray&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>sf::RectangleShape<sp/>rectangle(sf::Vector2f(100,<sp/>100));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><ref refid="WindowManager_8cpp_1aec280d23c9d0017ec6675aab38ef21a6" kindref="member">draw_shape</ref>(</highlight><highlight class="stringliteral">&quot;rectangle&quot;</highlight><highlight class="normal">,<sp/>window,<sp/>100,<sp/>100,<sp/>50,<sp/>sf::Color::Red,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf::Color::Green,<sp/>1);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><ref refid="WindowManager_8cpp_1aec280d23c9d0017ec6675aab38ef21a6" kindref="member">draw_shape</ref>(</highlight><highlight class="stringliteral">&quot;circle&quot;</highlight><highlight class="normal">,<sp/>window,<sp/>200,<sp/>200,<sp/>50,<sp/>sf::Color::Blue,<sp/>sf::Color::Yellow,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>drawText(</highlight><highlight class="stringliteral">&quot;It<sp/>works&quot;</highlight><highlight class="normal">,<sp/>480,<sp/>240,<sp/>sf::Color::Yellow);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>tempTexts.begin();<sp/>it<sp/>!=<sp/>tempTexts.end();)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;clock.getElapsedTime().asSeconds()<sp/>&lt;<sp/>it-&gt;duration)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>window.draw(it-&gt;text);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>tempTexts.erase(it);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>window.display();</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWindowManager_1a0f537986c4e536250edcca73fc6c8fbc" kindref="member">WindowManager::handleEvent</ref>()<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(window.pollEvent(event))<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event.type<sp/>==<sp/>sf::Event::Closed)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>window.close();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*dear<sp/>worker<sp/>:<sp/>input<sp/>can<sp/>be<sp/>managed<sp/>here.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/>you<sp/>can<sp/>decide<sp/>to<sp/>put<sp/>it<sp/>anywhere.<sp/>be<sp/>sur<sp/>that<sp/>it<sp/>work*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*input.handleInput(event,<sp/>window);</highlight></codeline>
<codeline lineno="110"><highlight class="comment"></highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(input.getButton().down<sp/>==<sp/>true)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>animation.moveY(&quot;red&quot;,<sp/>5);</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Down<sp/>button<sp/>pressed&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/><sp/>}<sp/>if<sp/>(input.getButton().up<sp/>==<sp/>true)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>animation.moveYUp(&quot;red&quot;,<sp/>5);</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Up<sp/>button<sp/>pressed&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/>}<sp/>if<sp/>(input.getButton().left<sp/>==<sp/>true)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>animation.moveXLeft(&quot;red&quot;,<sp/>5);</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Left<sp/>button<sp/>pressed&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/>}<sp/>if<sp/>(input.getButton().right<sp/>==<sp/>true)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>animation.moveXRight(&quot;red&quot;,<sp/>5);</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Right<sp/>button<sp/>pressed&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mouse.handleMousePosition(window);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">sf::RenderWindow<sp/>&amp;<ref refid="classWindowManager_1a5dc26d52d436644b60d4fe5dbf4cda0b" kindref="member">WindowManager::GetWindow</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;window;<sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">/*int<sp/>main()<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/>WindowManager<sp/>WindowManager(1500,<sp/>700,<sp/>&quot;R<sp/>type<sp/>window&quot;);</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/>WindowManager.loadFont(&quot;../../../assets/font/EduAUVICWANTDots-Bold.ttf&quot;);</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/>WindowManager.drawTextTemporarily(&quot;Temporary<sp/>text&quot;,<sp/>480,<sp/>300,</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf::Color::Green,<sp/>3.0f);</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/>WindowManager.drawTextTemporarily(&quot;Temporary<sp/>2&quot;,<sp/>480,<sp/>380,<sp/>sf::Color::Yellow,</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6.0f);</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/>WindowManager.drawTextTemporarily(&quot;Temporary<sp/>3&quot;,<sp/>480,<sp/>430,<sp/>sf::Color::Yellow,</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>9.0f);</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/>WindowManager.drawTextTemporarily(&quot;Temporary<sp/>4&quot;,<sp/>480,<sp/>480,<sp/>sf::Color::Yellow,</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>12.0f);</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/>WindowManager.drawTextTemporarily(&quot;Temporary<sp/>5&quot;,<sp/>480,<sp/>530,<sp/>sf::Color::Yellow,</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>15.0f);</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/>WindowManager.keepOpen();</highlight></codeline>
<codeline lineno="145"><highlight class="comment">}</highlight></codeline>
<codeline lineno="146"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="148"><highlight class="comment">g++<sp/>WindowManager.cpp<sp/>../Input/InputManager.cpp<sp/>../Mouse/MouseManager.cpp<sp/></highlight></codeline>
<codeline lineno="149"><highlight class="comment">../Animation/Animation.cpp<sp/>-o<sp/>open_window<sp/>-lsfml-graphics<sp/>-lsfml-window<sp/>-lsfml-system</highlight></codeline>
<codeline lineno="150"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/Engine/Window/WindowManager.cpp"/>
  </compounddef>
</doxygen>
