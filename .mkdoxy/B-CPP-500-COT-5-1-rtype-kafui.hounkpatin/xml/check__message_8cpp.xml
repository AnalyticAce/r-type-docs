<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="check__message_8cpp" kind="file" language="C++">
    <compoundname>check_message.cpp</compoundname>
    <includes refid="Server_8hpp" local="yes">../include/Server.hpp</includes>
    <incdepgraph>
      <node id="21">
        <label>Coin_system.hpp</label>
        <link refid="Server_2include_2Coin__system_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>Collision_system.hpp</label>
        <link refid="Server_2include_2Collision__system_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>Entity.hpp</label>
        <link refid="Server_2include_2Entity_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>Health_system.hpp</label>
        <link refid="Server_2include_2Health__system_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>Mouvement_system.hpp</label>
        <link refid="Server_2include_2Mouvement__system_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>../include/Server.hpp</label>
        <link refid="Server_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>Shoot_system.hpp</label>
        <link refid="Server_2include_2Shoot__system_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ThreadPool.hpp</label>
        <link refid="ThreadPool_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>Time_manager.hpp</label>
        <link refid="Server_2include_2Time__manager_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>Vector.hpp</label>
        <link refid="Server_2include_2Vector_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>../include/protocol.hpp</label>
        <link refid="protocol_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>room_system.hpp</label>
        <link refid="room__system_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Server/src/check_message.cpp</label>
        <link refid="check__message_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>algorithm</label>
      </node>
      <node id="34">
        <label>any</label>
      </node>
      <node id="15">
        <label>array</label>
      </node>
      <node id="9">
        <label>boost/asio.hpp</label>
      </node>
      <node id="16">
        <label>boost/bind/bind.hpp</label>
      </node>
      <node id="35">
        <label>cassert</label>
      </node>
      <node id="24">
        <label>cctype</label>
      </node>
      <node id="17">
        <label>chrono</label>
      </node>
      <node id="25">
        <label>cmath</label>
      </node>
      <node id="4">
        <label>cstddef</label>
      </node>
      <node id="5">
        <label>cstdint</label>
      </node>
      <node id="18">
        <label>cstring</label>
      </node>
      <node id="26">
        <label>fstream</label>
      </node>
      <node id="19">
        <label>functional</label>
      </node>
      <node id="6">
        <label>iostream</label>
      </node>
      <node id="27">
        <label>limits</label>
      </node>
      <node id="28">
        <label>map</label>
      </node>
      <node id="29">
        <label>memory</label>
      </node>
      <node id="36">
        <label>mutex</label>
      </node>
      <node id="37">
        <label>optional</label>
      </node>
      <node id="30">
        <label>regex</label>
      </node>
      <node id="31">
        <label>sstream</label>
      </node>
      <node id="32">
        <label>stdexcept</label>
      </node>
      <node id="13">
        <label>string</label>
      </node>
      <node id="20">
        <label>string_view</label>
      </node>
      <node id="10">
        <label>thread</label>
      </node>
      <node id="33">
        <label>tuple</label>
      </node>
      <node id="38">
        <label>typeindex</label>
      </node>
      <node id="14">
        <label>unordered_map</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">**<sp/>EPITECH<sp/>PROJECT,<sp/>2024</highlight></codeline>
<codeline lineno="3"><highlight class="comment">**<sp/>B-CPP-500-COT-5-1-rtype-kafui.hounkpatin</highlight></codeline>
<codeline lineno="4"><highlight class="comment">**<sp/>File<sp/>description:</highlight></codeline>
<codeline lineno="5"><highlight class="comment">**<sp/>check_message</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../include/Server.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classServer_1a81a0f407dfec7384d18ce56add98fce2" kindref="member">Server::get_player_id</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>udp::endpoint<sp/>&amp;client_endpoint)<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>client<sp/>:<sp/><ref refid="classServer_1a11ff54c2dafcf3447428be775b215b3c" kindref="member">_connected_clients</ref>)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(client<sp/>==<sp/>client_endpoint)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classServer_1a6b97b25172b3c31b6cd0f83963ecbbbf" kindref="member">Server::check_player_message</ref>(udp::socket<sp/>&amp;socket,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint8_t&gt;<sp/>&amp;buffer,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>udp::endpoint<sp/>&amp;client_endpoint)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer.empty())<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>std::string<sp/>pl_name;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>uint8_t<sp/>command<sp/>=<sp/>buffer[0];</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(command)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x01:<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Player<sp/>connected<sp/>from<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>client_endpoint<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>response<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Player<sp/>connected&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>socket.send_to(boost::asio::buffer(response),<sp/>client_endpoint);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x02:<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer.size()<sp/>&lt;<sp/>21)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>player<sp/>name<sp/>input&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>player_name(buffer.begin()<sp/>+<sp/>1,<sp/>buffer.end());</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Player<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>player_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>from<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>client_endpoint</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>command<sp/>=<sp/>0x02;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classServer_1a8215c317c9ccea1af12bffe1d3a4e7c5" kindref="member">players_count</ref>++;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;u_int16_t&gt;<sp/>response<sp/>=<sp/>{0x02,<sp/><ref refid="classServer_1a8215c317c9ccea1af12bffe1d3a4e7c5" kindref="member">players_count</ref>};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classServer_1a5cd60e8f153c791812d9b497a86116fa" kindref="member">id_name</ref>.push_back(std::make_pair(client_endpoint,<sp/>player_name));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classServer_1a37bf1bdfe9f658722d2e6986aee87455" kindref="member">registry</ref>.<ref refid="classRegistry_1aae7e3c1a5a7cc768a9fee6b92930bf21" kindref="member">spawn_player</ref>(player_name);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classServer_1a37bf1bdfe9f658722d2e6986aee87455" kindref="member">registry</ref>.<ref refid="classRegistry_1afbffaf13d8ec75c202d42dec47d21a2f" kindref="member">entity_update</ref>();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classServer_1a493e2f6cdc1ac7b34c7ba08e996af10d" kindref="member">game_run</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>client<sp/>:<sp/><ref refid="classServer_1a11ff54c2dafcf3447428be775b215b3c" kindref="member">_connected_clients</ref>)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>socket.send_to(boost::asio::buffer(response),<sp/>client);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Sent<sp/>player<sp/>id<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>client<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x03:<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer.size()<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>player<sp/>movement<sp/>input&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>direction<sp/>=<sp/>buffer[1];</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>move_direction;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(direction)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x01:</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>move_direction<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;keyup&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x02:</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>move_direction<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;keydown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x03:</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>move_direction<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;keyleft&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x04:</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>move_direction<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;keyright&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>direction&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(<ref refid="classServer_1a5cd60e8f153c791812d9b497a86116fa" kindref="member">id_name</ref>.begin(),<sp/><ref refid="classServer_1a5cd60e8f153c791812d9b497a86116fa" kindref="member">id_name</ref>.end(),</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;client_endpoint](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;udp::endpoint,<sp/>std::string&gt;<sp/>&amp;pair)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>pair.first<sp/>==<sp/>client_endpoint;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/><ref refid="classServer_1a5cd60e8f153c791812d9b497a86116fa" kindref="member">id_name</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pl_name<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Player<sp/>name<sp/>not<sp/>found<sp/>for<sp/>endpoint<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>client_endpoint<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector2D" kindref="compound">Vector2D</ref><sp/>pos<sp/>=<sp/>{0,<sp/>0};</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classServer_1a7cf9c7008b64401b78ea15e72afabfc3" kindref="member">movement</ref>.<ref refid="classMouvementSystem_1a72cd1f698e545225855b22caf6a9b6aa" kindref="member">handleInput</ref>(<ref refid="classServer_1a37bf1bdfe9f658722d2e6986aee87455" kindref="member">registry</ref>,<sp/>move_direction,<sp/>pl_name);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>=<sp/><ref refid="classServer_1a7cf9c7008b64401b78ea15e72afabfc3" kindref="member">movement</ref>.<ref refid="classMouvementSystem_1a3a0d1de66cea77a8f19925efbf98ef80" kindref="member">move_player</ref>(<ref refid="classServer_1a37bf1bdfe9f658722d2e6986aee87455" kindref="member">registry</ref>,<sp/>pl_name);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="classServer_1a81a0f407dfec7384d18ce56add98fce2" kindref="member">get_player_id</ref>(client_endpoint);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;u_int16_t&gt;<sp/>response<sp/>=<sp/>{0x03,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">u_int16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(id)<sp/>,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">u_int16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pos.<ref refid="classVector2D_1ac5c4e553815737aa24bec8281270178f" kindref="member">x</ref>),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">u_int16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pos.<ref refid="classVector2D_1ac38d0179cfe74c30fee290a703ab209a" kindref="member">y</ref>)};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;u_int16_t&gt;<sp/>update<sp/>=<sp/>{0x05,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">u_int16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(id),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">u_int16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pos.<ref refid="classVector2D_1ac5c4e553815737aa24bec8281270178f" kindref="member">x</ref>),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">u_int16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pos.<ref refid="classVector2D_1ac38d0179cfe74c30fee290a703ab209a" kindref="member">y</ref>)};</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Player<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>x<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pos.<ref refid="classVector2D_1ac5c4e553815737aa24bec8281270178f" kindref="member">x</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>y<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pos.<ref refid="classVector2D_1ac38d0179cfe74c30fee290a703ab209a" kindref="member">y</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>socket.send_to(boost::asio::buffer(response),<sp/>client_endpoint);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>client<sp/>:<sp/><ref refid="classServer_1a11ff54c2dafcf3447428be775b215b3c" kindref="member">_connected_clients</ref>)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>socket.send_to(boost::asio::buffer(update),<sp/>client);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x06<sp/>:<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>command<sp/>received&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classServer_1a8b23573e108de83f85118223b2245b6e" kindref="member">Server::check_player_position</ref>(udp::socket<sp/>&amp;socket,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint8_t&gt;<sp/>&amp;buffer,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>udp::endpoint<sp/>&amp;client_endpoint)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer.empty())<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer.size()<sp/>&lt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>player<sp/>position<sp/>input&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>uint8_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>buffer[1];</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>uint8_t<sp/>pos_x<sp/>=<sp/>buffer[2];</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>uint8_t<sp/>pos_y<sp/>=<sp/>buffer[3];</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Player<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(id)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>position:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pos_x)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pos_y)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>std::vector&lt;u_int16_t&gt;<sp/>response<sp/>=<sp/>{0x05,<sp/>id,<sp/>pos_x,<sp/>pos_y};</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>client<sp/>:<sp/><ref refid="classServer_1a11ff54c2dafcf3447428be775b215b3c" kindref="member">_connected_clients</ref>)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>socket.send_to(boost::asio::buffer(response),<sp/>client);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/Server/src/check_message.cpp"/>
  </compounddef>
</doxygen>
