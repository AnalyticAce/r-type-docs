<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="Server_2src_2Entity_8cpp" kind="file" language="C++">
    <compoundname>Entity.cpp</compoundname>
    <includes refid="Server_2include_2Entity_8hpp" local="yes">../include/Entity.hpp</includes>
    <incdepgraph>
      <node id="2">
        <label>../include/Entity.hpp</label>
        <link refid="Server_2include_2Entity_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Vector.hpp</label>
        <link refid="Server_2include_2Vector_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Server/src/Entity.cpp</label>
        <link refid="Server_2src_2Entity_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>algorithm</label>
      </node>
      <node id="19">
        <label>any</label>
      </node>
      <node id="5">
        <label>array</label>
      </node>
      <node id="20">
        <label>cassert</label>
      </node>
      <node id="6">
        <label>cctype</label>
      </node>
      <node id="7">
        <label>cmath</label>
      </node>
      <node id="8">
        <label>fstream</label>
      </node>
      <node id="9">
        <label>iostream</label>
      </node>
      <node id="10">
        <label>limits</label>
      </node>
      <node id="11">
        <label>map</label>
      </node>
      <node id="12">
        <label>memory</label>
      </node>
      <node id="21">
        <label>mutex</label>
      </node>
      <node id="22">
        <label>optional</label>
      </node>
      <node id="13">
        <label>regex</label>
      </node>
      <node id="14">
        <label>sstream</label>
      </node>
      <node id="15">
        <label>stdexcept</label>
      </node>
      <node id="16">
        <label>string</label>
      </node>
      <node id="17">
        <label>tuple</label>
      </node>
      <node id="23">
        <label>typeindex</label>
      </node>
      <node id="24">
        <label>unordered_map</label>
      </node>
      <node id="18">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">**<sp/>EPITECH<sp/>PROJECT,<sp/>2024</highlight></codeline>
<codeline lineno="3"><highlight class="comment">**<sp/>B-CPP-500-COT-5-1-bsrtype-kafui.hounkpatin</highlight></codeline>
<codeline lineno="4"><highlight class="comment">**<sp/>File<sp/>description:</highlight></codeline>
<codeline lineno="5"><highlight class="comment">**<sp/>Entity.cpp</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../include/Entity.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRegistry_1afbffaf13d8ec75c202d42dec47d21a2f" kindref="member">Registry::entity_update</ref>()<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;entity<sp/>:<sp/>_new_entities)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>_entities_vector.push_back(entity);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>_entities_map[entity-&gt;_tag].push_back(entity);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>_new_entities.clear();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;entity<sp/>:<sp/>_entities_vector)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!entity-&gt;_alive)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>_entities_vector.erase(</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::remove_if(_entities_vector.begin(),<sp/>_entities_vector.end(),</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Entity&gt;<sp/>&amp;entity)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>!entity-&gt;_alive;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}),</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_entities_vector.end());</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><ref refid="GameLogic_2Entity_8hpp_1ace69d8a06cf49e191ab3fb4b5bf65085" kindref="member">EntityVector</ref><sp/>&amp;<ref refid="classRegistry_1aaf54a9f23617bec8da15e280c047e47b" kindref="member">Registry::get_entities</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>tag)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_entities_map[tag];</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><ref refid="GameLogic_2Entity_8hpp_1ace69d8a06cf49e191ab3fb4b5bf65085" kindref="member">EntityVector</ref><sp/>&amp;<ref refid="classRegistry_1aaf54a9f23617bec8da15e280c047e47b" kindref="member">Registry::get_entities</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_entities_vector;<sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><ref refid="classVector2D" kindref="compound">Vector2D</ref><sp/><ref refid="classRegistry_1a34fd387f24d7d8cfa2bc923134acc38e" kindref="member">Registry::spawn_enemy</ref>()<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>enemy<sp/>=<sp/><ref refid="classRegistry_1a175e1136557c0a34e380ae1e31913445" kindref="member">add_entity</ref>(</highlight><highlight class="stringliteral">&quot;Enemy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>enemy-&gt;transform<sp/>=</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;Transform&gt;(<ref refid="classVector2D" kindref="compound">Vector2D</ref>(200,<sp/>200),<sp/><ref refid="classVector2D" kindref="compound">Vector2D</ref>(0,<sp/>0));</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>enemy-&gt;bbox<sp/>=<sp/>std::make_unique&lt;BBox&gt;(<ref refid="classVector2D" kindref="compound">Vector2D</ref>(50,<sp/>50));</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>enemy-&gt;transform-&gt;position.y<sp/>=<sp/>rand()<sp/>%<sp/>400<sp/>+<sp/>100;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>enemy-&gt;transform-&gt;position.x<sp/>=<sp/>775;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>enemy-&gt;health<sp/>=<sp/>std::make_unique&lt;Health&gt;(10);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>enemy-&gt;transform-&gt;position;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">std::shared_ptr&lt;Entity&gt;<sp/><ref refid="classRegistry_1a175e1136557c0a34e380ae1e31913445" kindref="member">Registry::add_entity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>tag)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Entity&gt;<sp/>entity<sp/>=</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;Entity&gt;(_entities_count,<sp/>tag);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>_new_entities.push_back(entity);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>_entities_count++;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRegistry_1abd72bee0e1a04c1996743dbfbb9a31b0" kindref="member">Registry::spawn_coin</ref>()<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>coin<sp/>=<sp/><ref refid="classRegistry_1a175e1136557c0a34e380ae1e31913445" kindref="member">add_entity</ref>(</highlight><highlight class="stringliteral">&quot;Coin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>coin-&gt;transform<sp/>=</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;Transform&gt;(<ref refid="classVector2D" kindref="compound">Vector2D</ref>(200,<sp/>200),<sp/><ref refid="classVector2D" kindref="compound">Vector2D</ref>(0,<sp/>0));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>coin-&gt;bbox<sp/>=<sp/>std::make_unique&lt;BBox&gt;(<ref refid="classVector2D" kindref="compound">Vector2D</ref>(20,<sp/>20));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>coin-&gt;transform-&gt;position.y<sp/>=<sp/>rand()<sp/>%<sp/>400<sp/>+<sp/>100;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>coin-&gt;transform-&gt;position.x<sp/>=<sp/>775;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>coin-&gt;transform-&gt;velocity.x<sp/>=<sp/>-0.005;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRegistry_1aae7e3c1a5a7cc768a9fee6b92930bf21" kindref="member">Registry::spawn_player</ref>(std::string<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>player<sp/>=<sp/><ref refid="classRegistry_1a175e1136557c0a34e380ae1e31913445" kindref="member">add_entity</ref>(</highlight><highlight class="stringliteral">&quot;Player&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>players<sp/>=<sp/><ref refid="classRegistry_1aaf54a9f23617bec8da15e280c047e47b" kindref="member">get_entities</ref>(</highlight><highlight class="stringliteral">&quot;Player&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Players<sp/>size<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>players.size()<sp/>&lt;&lt;<sp/>std::endl;<sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(players.size()<sp/>==<sp/>0)<sp/></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>player-&gt;transform<sp/>=<sp/>std::make_unique&lt;Transform&gt;(<ref refid="classVector2D" kindref="compound">Vector2D</ref>(100,<sp/>100),<sp/><ref refid="classVector2D" kindref="compound">Vector2D</ref>(0,<sp/>0));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(players.size()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>player-&gt;transform<sp/>=<sp/>std::make_unique&lt;Transform&gt;(<ref refid="classVector2D" kindref="compound">Vector2D</ref>(100,<sp/>300),<sp/><ref refid="classVector2D" kindref="compound">Vector2D</ref>(0,<sp/>0));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>player-&gt;bbox<sp/>=<sp/>std::make_unique&lt;BBox&gt;(<ref refid="classVector2D" kindref="compound">Vector2D</ref>(50,<sp/>50));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>player-&gt;health<sp/>=<sp/>std::make_unique&lt;Health&gt;(100);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>player-&gt;score<sp/>=<sp/>std::make_unique&lt;Score&gt;();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>player-&gt;input<sp/>=<sp/>std::make_unique&lt;Input&gt;();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>player-&gt;name<sp/>=<sp/>std::make_unique&lt;Name&gt;(name);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/Server/src/Entity.cpp"/>
  </compounddef>
</doxygen>
