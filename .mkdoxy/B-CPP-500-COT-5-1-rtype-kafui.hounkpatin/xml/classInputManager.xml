<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classInputManager" kind="class" language="C++" prot="public">
    <compoundname>InputManager</compoundname>
    <includes refid="InputManager_8hpp" local="no">InputManager.hpp</includes>
    <innerclass refid="structInputManager_1_1Button" prot="private">InputManager::Button</innerclass>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classInputManager_1ad0e2914078b71b78f4809abca424f860" prot="private" static="no" mutable="no">
        <type>Button</type>
        <definition>Button InputManager::button</definition>
        <argsstring></argsstring>
        <name>button</name>
        <qualifiedname>InputManager::button</qualifiedname>
        <briefdescription>
<para>Stores the current state of control buttons. </para>
        </briefdescription>
        <detaileddescription>
<para>An instance of the Button struct that holds the current states of all tracked buttons. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Engine/Input/InputManager.hpp" line="39" column="10" bodyfile="include/Engine/Input/InputManager.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classInputManager_1a8be46886da639b26d67181c29dab6d6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>InputManager::InputManager</definition>
        <argsstring>()</argsstring>
        <name>InputManager</name>
        <qualifiedname>InputManager::InputManager</qualifiedname>
        <briefdescription>
<para>Constructs an <ref refid="classInputManager" kindref="compound">InputManager</ref> instance. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes the <ref refid="classInputManager" kindref="compound">InputManager</ref> and sets up the internal button state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Engine/Input/InputManager.hpp" line="47" column="3" bodyfile="src/Engine/Input/InputManager.cpp" bodystart="3" bodyend="6"/>
      </memberdef>
      <memberdef kind="function" id="classInputManager_1af518290877dd183606709d5852db5491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>InputManager::~InputManager</definition>
        <argsstring>()</argsstring>
        <name>~InputManager</name>
        <qualifiedname>InputManager::~InputManager</qualifiedname>
        <briefdescription>
<para>Destructs the <ref refid="classInputManager" kindref="compound">InputManager</ref> instance. </para>
        </briefdescription>
        <detaileddescription>
<para>Cleans up any resources used for input handling. Since no dynamic memory is allocated, this primarily exists for completeness. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Engine/Input/InputManager.hpp" line="55" column="3" bodyfile="src/Engine/Input/InputManager.cpp" bodystart="8" bodyend="8"/>
      </memberdef>
      <memberdef kind="function" id="classInputManager_1a39f21b14a2d4fd291f0a8b4cea81f6b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void InputManager::handleInput</definition>
        <argsstring>(sf::Event event, sf::RenderWindow &amp;window)</argsstring>
        <name>handleInput</name>
        <qualifiedname>InputManager::handleInput</qualifiedname>
        <param>
          <type>sf::Event</type>
          <declname>event</declname>
        </param>
        <param>
          <type>sf::RenderWindow &amp;</type>
          <declname>window</declname>
        </param>
        <briefdescription>
<para>Handles input events from the window. </para>
        </briefdescription>
        <detaileddescription>
<para>Processes the given SFML event and updates the internal button states based on key presses or releases. It also handles window-specific events such as closing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>The SFML event to process (e.g., key press or release). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>window</parametername>
</parameternamelist>
<parameterdescription>
<para>The SFML render window where the event is coming from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Engine/Input/InputManager.hpp" line="66" column="8" bodyfile="src/Engine/Input/InputManager.cpp" bodystart="12" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classInputManager_1a00ff1cba5ac8a395b974b633c9b5bd11" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Button</type>
        <definition>InputManager::Button InputManager::getButton</definition>
        <argsstring>(void) const</argsstring>
        <name>getButton</name>
        <qualifiedname>InputManager::getButton</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Retrieves the current button states. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a copy of the Button structure containing the current states of all tracked buttons.</para>
<para><simplesect kind="return"><para>A Button struct with the state of the control buttons. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Engine/Input/InputManager.hpp" line="75" column="10" bodyfile="src/Engine/Input/InputManager.cpp" bodystart="10" bodyend="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Manages keyboard and window input events using the SFML library. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classInputManager" kindref="compound">InputManager</ref> class is responsible for handling user input, including keyboard events and window-related events (e.g., closing the window). It provides an interface to track specific key presses and allows easy retrieval of button states. </para>
    </detaileddescription>
    <location file="include/Engine/Input/InputManager.hpp" line="15" column="1" bodyfile="include/Engine/Input/InputManager.hpp" bodystart="15" bodyend="76"/>
    <listofallmembers>
      <member refid="classInputManager_1ad0e2914078b71b78f4809abca424f860" prot="private" virt="non-virtual"><scope>InputManager</scope><name>button</name></member>
      <member refid="classInputManager_1a00ff1cba5ac8a395b974b633c9b5bd11" prot="public" virt="non-virtual"><scope>InputManager</scope><name>getButton</name></member>
      <member refid="classInputManager_1a39f21b14a2d4fd291f0a8b4cea81f6b6" prot="public" virt="non-virtual"><scope>InputManager</scope><name>handleInput</name></member>
      <member refid="classInputManager_1a8be46886da639b26d67181c29dab6d6c" prot="public" virt="non-virtual"><scope>InputManager</scope><name>InputManager</name></member>
      <member refid="classInputManager_1af518290877dd183606709d5852db5491" prot="public" virt="non-virtual"><scope>InputManager</scope><name>~InputManager</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
